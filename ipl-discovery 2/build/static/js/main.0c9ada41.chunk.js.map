{"version":3,"sources":["InfoCard.js","ExtractData.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["InfoCard","props","player_info_card_body","width","height","fontSize","margin","display","flexDirection","justifyContent","alignItems","id","style","flexWrap","padding","border","borderRadius","Object","keys","fileContentObject","map","item","index","className","color","textOverflow","ExtractData","fileContent","data","start","end","a","slice","filtersObject","categoriesAll","deliveries","results","matches","most_runs_average_strikerate","players","teams","teamwise_home_and_away","categoriesFixed","Dashboard","React","useState","setFileContent","setStart","isLastArray","setIsLastArray","currentFilter","setCurrentFilter","displayAll","setDisplayAll","RenderFilters","type","background","onClick","showData","console","time","getData","then","result","timeEnd","catch","err","log","useEffect","current_filter_length","length","NavigateResults","memo","inc","useCallback","c","dec","disabled","placeholder","autoFocus","backgroundColor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c9ada41.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n//arranges data to be rendered in a card\nconst InfoCard = (props) => {\n  const player_info_card = {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    flexWrap: \"wrap\",\n    padding: \"20px\",\n    border: \"1px solid black\",\n    borderRadius: \"5px\",\n    margin: \"5px\",\n  };\n\n  const player_info_card_body = {\n    width: \"15%\",\n    height: \"50px\",\n    fontSize: \"80%\",\n    margin: \"5px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  };\n\n  return (\n    <ul id=\"player-info-card\" style={player_info_card}>\n      {Object.keys(props.fileContentObject).map((item, index) => {\n        return (\n          <ol\n            key={index}\n            style={player_info_card_body}\n            className=\"player-info-card-body\"\n          >\n            <li\n              className=\"player-info-card-body-key\"\n              style={{ fontSize: \"80%\", color: \"rgb(90,90,90)\" }}\n            >\n              {item}\n            </li>\n            <li\n              className=\"player-info-card-body-value\"\n              style={{ fontSize: \"100%\", textOverflow: \"ellipsis\" }}\n            >\n              {props.fileContentObject[item] === \"\"\n                ? (props.fileContentObject[item] = \"__\")\n                : props.fileContentObject[item]}\n            </li>\n          </ol>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default InfoCard;\n","import React from \"react\";\nimport InfoCard from \"./InfoCard\";\n\n//renders cards from data received by props\nconst ExtractData = (props) => {\n  return props.fileContent.map((item, index) => {\n    return <InfoCard key={index} fileContentObject={item} />;\n  });\n};\n\nexport default ExtractData;\n","import React from \"react\";\n\nimport deliveries from \"./static/archive/deliveries\";\nimport matches from \"./static/archive/matches\";\nimport most_runs_average_strikerate from \"./static/archive/most_runs_average_strikerate\";\nimport teams from \"./static/archive/teams\";\nimport players from \"./static/archive/players\";\nimport teamwise_home_and_away from \"./static/archive/teamwise_home_and_away\";\nimport ExtractData from \"./ExtractData\";\n\nimport \"./App.css\";\n\n//returns ranged data from desired dataset\nexport async function getData(data, start, end) {\n  return data.slice(start, end);\n}\n\nconst filtersObject = [\n  \"Deliveries\",\n  \"Matches\",\n  \"Most Runs Average Strikerate\",\n  \"Players\",\n  \"Teams\",\n  \"Teamwise Home and Away\",\n];\n\nconst categoriesAll = [\n  ...deliveries.results,\n  ...matches.results,\n  ...most_runs_average_strikerate.results,\n  ...players.results,\n  ...teams.results,\n  ...teamwise_home_and_away.results,\n];\n\nconst categoriesFixed = [\n  deliveries.results,\n  matches.results,\n  most_runs_average_strikerate.results,\n  players.results,\n  teams.results,\n  teamwise_home_and_away.results,\n];\n\n//main function component, rendered in App\nconst Dashboard = (props) => {\n  //selects dataset to be displayed\n  const [fileContent, setFileContent] = React.useState([]);\n  const [start, setStart] = React.useState(0);\n\n  //checks if array returned by getData is the last one\n  const [isLastArray, setIsLastArray] = React.useState(false);\n\n  //sets dataset values from categoriesAll or categoriesFixed\n  const [currentFilter, setCurrentFilter] = React.useState();\n\n  //toggle between all filters and only a few at a time\n  const [displayAll, setDisplayAll] = React.useState(true);\n\n  //shows button filters\n  const RenderFilters = () => {\n    return (\n      <ul id=\"filter-buttons\">\n        <li className=\"filter-button-list-item\">\n          <button\n            type=\"button\"\n            className=\"btn filter-btn\"\n            style={{\n              background: displayAll ? \"rgb(40,40,40)\" : \"white\",\n              color: displayAll ? \"white\" : \"black\",\n              border: \"1px solid rgb(40,40,40)\",\n            }}\n            onClick={() => {\n              setDisplayAll(!displayAll);\n            }}\n          >\n            All\n          </button>\n        </li>\n        {filtersObject.map((item, index) => {\n          return (\n            <li key={index} className=\"filter-buttons-name\">\n              <button\n                type=\"button\"\n                className=\"btn filter-btn\"\n                style={{\n                  background: displayAll\n                    ? \"black\"\n                    : index === 1 || index === 3\n                    ? \"black\"\n                    : \"white\",\n\n                  color: displayAll\n                    ? \"white\"\n                    : index === 1 || index === 3\n                    ? \"white\"\n                    : \"black\",\n                  border: \"1px solid black\",\n                }}\n              >\n                {item}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  //fetches data and sets value of currentFilter\n  const showData = () => {\n    console.time();\n\n    getData(currentFilter, start, start + 10)\n      .then((result) => {\n        setFileContent(result);\n        console.timeEnd();\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //lifecycle to ensure functionality on changes to dependencies (from dependency array)\n  React.useEffect(() => {\n    showData();\n\n    if (currentFilter) {\n      let current_filter_length = currentFilter.length;\n\n      setIsLastArray(current_filter_length - start < 10 ? true : false);\n    }\n  }, [currentFilter, start, isLastArray]);\n\n  //to use memoization, limit re-renders\n  const NavigateResults = React.memo(() => {\n    const inc = React.useCallback(() => {\n      setStart((c) => c + 10);\n      if (isLastArray) {\n        setStart(0);\n      }\n    }, []);\n\n    const dec = React.useCallback(() => {\n      setStart((c) => c - 10);\n    }, []);\n\n    //buttons to navigate dataset\n    return currentFilter ? (\n      <div>\n        <button\n          type=\"button\"\n          disabled={start < 10}\n          className=\"prev-next-btn\"\n          onClick={dec}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          disabled={isLastArray}\n          className=\"prev-next-btn\"\n          onClick={inc}\n        >\n          Next\n        </button>\n      </div>\n    ) : null;\n  });\n\n  return (\n    <div id=\"dashboard-div-outermost\">\n      <div id=\"search-and-filters-div\">\n        <input\n          id=\"search-bar\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          autoFocus\n        ></input>\n\n        <RenderFilters />\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            setStart(0);\n            setCurrentFilter(\n              displayAll\n                ? categoriesAll\n                : [...categoriesFixed[1], ...categoriesFixed[3]]\n            );\n            showData();\n          }}\n          className=\"search-btn\"\n        >\n          Search\n        </button>\n      </div>\n\n      <div\n        id=\"next-prev-btns\"\n        style={{ backgroundColor: currentFilter ? \"black\" : \"none\" }}\n      >\n        <NavigateResults />\n      </div>\n      <div id=\"cards-display-div\">\n        {fileContent.length !== 0 ? (\n          <ExtractData fileContent={fileContent} />\n        ) : (\n          <h1>Landing Page</h1>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import Dashboard from \"./Dashboard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}